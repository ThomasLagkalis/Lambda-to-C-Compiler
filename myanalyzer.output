Terminals unused in grammar

    CONST_STRING
    KW_IF
    KW_ENDIF
    KW_THEN
    KW_ELSE
    KW_ENDFOR
    KW_CONST
    KW_WHILE
    KW_ENDWHILE
    KW_BREAK
    KW_CONTINUE
    KW_DEF
    KW_ENDDEF
    KW_MAIN
    KW_RETURN
    KW_COMP
    KW_ENDCOMP
    '.'


Grammar

    0 $accept: start $end

    1 start: ε
    2      | start expr ';'

    3 declarations: var_decl
    4             | array_decl

    5 data_type: KW_INTEGER
    6          | KW_BOOL
    7          | KW_SCALAR
    8          | KW_STR

    9 var_decl: id_recursion ':' data_type

   10 id_recursion: ID
   11             | ID ',' id_recursion

   12 array_decl: '[' ']' ':' data_type
   13           | ID '[' expr ']' ':' data_type

   14 expr: id_expr
   15     | declarations
   16     | assign_expr
   17     | boolean_expr
   18     | relation_expr
   19     | arithmetic_expr
   20     | '[' expr ')'
   21     | '(' expr ')'
   22     | DOT

   23 boolean_expr: KW_NOT expr
   24             | expr KW_OR expr
   25             | expr KW_AND expr
   26             | KW_TRUE
   27             | KW_FALSE

   28 id_expr: ID
   29        | ID '[' expr ']'
   30        | ID '[' INTEGER ']'

   31 relation_expr: expr OP_EQUAL expr
   32              | expr OP_INEQUAL expr
   33              | expr '<' expr
   34              | expr '>' expr
   35              | expr OP_LESSEQUAL expr
   36              | expr OP_GREATEREQUAL expr

   37 assign_expr: ID ASSIGN_PLUS expr
   38            | ID ASSIGN_MINUS expr
   39            | ID ASSIGN_PRODUCT expr
   40            | ID ASSIGN_DIV expr
   41            | ID ASSIGN_MOD expr
   42            | ID ASSIGN expr
   43            | arrays

   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type

   46 arithmetic_expr: INTEGER
   47                | FLOAT
   48                | expr '+' expr
   49                | expr '-' expr
   50                | expr '*' expr
   51                | expr '/' expr
   52                | expr '%' expr
   53                | '+' expr
   54                | '-' expr
   55                | expr OP_POWER expr


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 52
    '(' (40) 21
    ')' (41) 20 21
    '*' (42) 50
    '+' (43) 48 53
    ',' (44) 11
    '-' (45) 49 54
    '.' (46)
    '/' (47) 51
    ':' (58) 9 12 13 44 45
    ';' (59) 2
    '<' (60) 33
    '>' (62) 34
    '[' (91) 12 13 20 29 30 44 45
    ']' (93) 12 13 29 30 44 45
    error (256)
    ID <str> (258) 10 11 13 28 29 30 37 38 39 40 41 42 44 45
    INTEGER <str> (259) 30 44 45 46
    FLOAT <str> (260) 47
    CONST_STRING (261)
    KW_IF (262)
    KW_ENDIF (263)
    KW_THEN (264)
    KW_ELSE (265)
    KW_FOR (266) 44 45
    KW_ENDFOR (267)
    KW_TRUE (268) 26
    KW_FALSE (269) 27
    KW_INTEGER (270) 5
    KW_SCALAR (271) 7
    KW_STR (272) 8
    KW_BOOL (273) 6
    KW_CONST (274)
    KW_IN (275) 45
    KW_WHILE (276)
    KW_ENDWHILE (277)
    KW_BREAK (278)
    KW_CONTINUE (279)
    KW_NOT (280) 23
    KW_AND (281) 25
    KW_OR (282) 24
    KW_DEF (283)
    KW_ENDDEF (284)
    KW_MAIN (285)
    KW_RETURN (286)
    KW_COMP (287)
    KW_ENDCOMP (288)
    KW_OF (289) 45
    DOT <str> (290) 22
    OP_POWER (291) 55
    OP_LESSEQUAL (292) 35
    OP_GREATEREQUAL (293) 36
    OP_EQUAL (294) 31
    OP_INEQUAL (295) 32
    ASSIGN (296) 42
    ASSIGN_PLUS (297) 37
    ASSIGN_MINUS (298) 38
    ASSIGN_PRODUCT (299) 39
    ASSIGN_DIV (300) 40
    ASSIGN_MOD (301) 41
    ASSIGN_DOTS (302) 44 45


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    start (64)
        on left: 1 2
        on right: 0 2
    declarations <str> (65)
        on left: 3 4
        on right: 15
    data_type <str> (66)
        on left: 5 6 7 8
        on right: 9 12 13 44 45
    var_decl <str> (67)
        on left: 9
        on right: 3
    id_recursion <str> (68)
        on left: 10 11
        on right: 9 11
    array_decl <str> (69)
        on left: 12 13
        on right: 4
    expr <str> (70)
        on left: 14 15 16 17 18 19 20 21 22
        on right: 2 13 20 21 23 24 25 29 31 32 33 34 35 36 37 38 39 40 41 42 44 45 48 49 50 51 52 53 54 55
    boolean_expr <str> (71)
        on left: 23 24 25 26 27
        on right: 17
    id_expr <str> (72)
        on left: 28 29 30
        on right: 14
    relation_expr <str> (73)
        on left: 31 32 33 34 35 36
        on right: 18
    assign_expr <str> (74)
        on left: 37 38 39 40 41 42 43
        on right: 16
    arrays <str> (75)
        on left: 44 45
        on right: 43
    arithmetic_expr <str> (76)
        on left: 46 47 48 49 50 51 52 53 54 55
        on right: 19


State 0

    0 $accept: • start $end
    1 start: ε •
    2      | • start expr ';'

    $default  reduce using rule 1 (start)

    start  go to state 1


State 1

    0 $accept: start • $end
    2 start: start • expr ';'
    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    $end      shift, and go to state 2
    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 18
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 2

    0 $accept: start $end •

    $default  accept


State 3

   10 id_recursion: ID •  [':']
   11             | ID • ',' id_recursion
   13 array_decl: ID • '[' expr ']' ':' data_type
   28 id_expr: ID •  [KW_FOR, KW_AND, KW_OR, OP_POWER, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   29        | ID • '[' expr ']'
   30        | ID • '[' INTEGER ']'
   37 assign_expr: ID • ASSIGN_PLUS expr
   38            | ID • ASSIGN_MINUS expr
   39            | ID • ASSIGN_PRODUCT expr
   40            | ID • ASSIGN_DIV expr
   41            | ID • ASSIGN_MOD expr
   42            | ID • ASSIGN expr
   44 arrays: ID • ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | ID • ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type

    ASSIGN          shift, and go to state 25
    ASSIGN_PLUS     shift, and go to state 26
    ASSIGN_MINUS    shift, and go to state 27
    ASSIGN_PRODUCT  shift, and go to state 28
    ASSIGN_DIV      shift, and go to state 29
    ASSIGN_MOD      shift, and go to state 30
    ASSIGN_DOTS     shift, and go to state 31
    '['             shift, and go to state 32
    ','             shift, and go to state 33

    ':'       reduce using rule 10 (id_recursion)
    $default  reduce using rule 28 (id_expr)


State 4

   46 arithmetic_expr: INTEGER •

    $default  reduce using rule 46 (arithmetic_expr)


State 5

   47 arithmetic_expr: FLOAT •

    $default  reduce using rule 47 (arithmetic_expr)


State 6

   26 boolean_expr: KW_TRUE •

    $default  reduce using rule 26 (boolean_expr)


State 7

   27 boolean_expr: KW_FALSE •

    $default  reduce using rule 27 (boolean_expr)


State 8

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   23             | KW_NOT • expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 34
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 9

   22 expr: DOT •

    $default  reduce using rule 22 (expr)


State 10

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   54                | '-' • expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 35
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 11

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   53                | '+' • expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 36
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 12

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   21     | '(' • expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 37
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 13

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   12           | '[' • ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   20     | '[' • expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13
    ']'       shift, and go to state 38

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 39
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 14

   15 expr: declarations •

    $default  reduce using rule 15 (expr)


State 15

    3 declarations: var_decl •

    $default  reduce using rule 3 (declarations)


State 16

    9 var_decl: id_recursion • ':' data_type

    ':'  shift, and go to state 40


State 17

    4 declarations: array_decl •

    $default  reduce using rule 4 (declarations)


State 18

    2 start: start expr • ';'
   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54
    ';'              shift, and go to state 55


State 19

   17 expr: boolean_expr •

    $default  reduce using rule 17 (expr)


State 20

   14 expr: id_expr •

    $default  reduce using rule 14 (expr)


State 21

   18 expr: relation_expr •

    $default  reduce using rule 18 (expr)


State 22

   16 expr: assign_expr •

    $default  reduce using rule 16 (expr)


State 23

   43 assign_expr: arrays •

    $default  reduce using rule 43 (assign_expr)


State 24

   19 expr: arithmetic_expr •

    $default  reduce using rule 19 (expr)


State 25

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   42            | ID ASSIGN • expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 56
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 26

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   37            | ID ASSIGN_PLUS • expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 57
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 27

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   38            | ID ASSIGN_MINUS • expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 58
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 28

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   39            | ID ASSIGN_PRODUCT • expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 59
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 29

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   40            | ID ASSIGN_DIV • expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 60
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 30

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   41            | ID ASSIGN_MOD • expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 61
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 31

   44 arrays: ID ASSIGN_DOTS • '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | ID ASSIGN_DOTS • '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type

    '['  shift, and go to state 62


State 32

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   13           | ID '[' • expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   29        | ID '[' • expr ']'
   30        | • ID '[' INTEGER ']'
   30        | ID '[' • INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 63
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 64
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 33

   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   11             | ID ',' • id_recursion

    ID  shift, and go to state 65

    id_recursion  go to state 66


State 34

   23 boolean_expr: KW_NOT expr •  [KW_FOR, KW_AND, KW_OR, ')', ']', ';']
   24             | expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 23 (boolean_expr)

    Conflict between rule 23 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 23 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 23 and token OP_POWER resolved as shift (KW_NOT < OP_POWER).
    Conflict between rule 23 and token OP_LESSEQUAL resolved as shift (KW_NOT < OP_LESSEQUAL).
    Conflict between rule 23 and token OP_GREATEREQUAL resolved as shift (KW_NOT < OP_GREATEREQUAL).
    Conflict between rule 23 and token OP_EQUAL resolved as shift (KW_NOT < OP_EQUAL).
    Conflict between rule 23 and token OP_INEQUAL resolved as shift (KW_NOT < OP_INEQUAL).
    Conflict between rule 23 and token '>' resolved as shift (KW_NOT < '>').
    Conflict between rule 23 and token '<' resolved as shift (KW_NOT < '<').
    Conflict between rule 23 and token '-' resolved as shift (KW_NOT < '-').
    Conflict between rule 23 and token '+' resolved as shift (KW_NOT < '+').
    Conflict between rule 23 and token '*' resolved as shift (KW_NOT < '*').
    Conflict between rule 23 and token '/' resolved as shift (KW_NOT < '/').
    Conflict between rule 23 and token '%' resolved as shift (KW_NOT < '%').


State 35

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   54                | '-' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 54 (arithmetic_expr)

    Conflict between rule 54 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 54 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 54 and token OP_POWER resolved as shift ('-' < OP_POWER).
    Conflict between rule 54 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '-').
    Conflict between rule 54 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '-').
    Conflict between rule 54 and token OP_EQUAL resolved as reduce (OP_EQUAL < '-').
    Conflict between rule 54 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '-').
    Conflict between rule 54 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 54 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 54 and token '-' resolved as reduce (%left '-').
    Conflict between rule 54 and token '+' resolved as reduce (%left '+').
    Conflict between rule 54 and token '*' resolved as reduce (%left '*').
    Conflict between rule 54 and token '/' resolved as reduce (%left '/').
    Conflict between rule 54 and token '%' resolved as reduce (%left '%').


State 36

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   53                | '+' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 53 (arithmetic_expr)

    Conflict between rule 53 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 53 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 53 and token OP_POWER resolved as shift ('+' < OP_POWER).
    Conflict between rule 53 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '+').
    Conflict between rule 53 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '+').
    Conflict between rule 53 and token OP_EQUAL resolved as reduce (OP_EQUAL < '+').
    Conflict between rule 53 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '+').
    Conflict between rule 53 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 53 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 53 and token '-' resolved as reduce (%left '-').
    Conflict between rule 53 and token '+' resolved as reduce (%left '+').
    Conflict between rule 53 and token '*' resolved as reduce (%left '*').
    Conflict between rule 53 and token '/' resolved as reduce (%left '/').
    Conflict between rule 53 and token '%' resolved as reduce (%left '%').


State 37

   21 expr: '(' expr • ')'
   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54
    ')'              shift, and go to state 67


State 38

   12 array_decl: '[' ']' • ':' data_type

    ':'  shift, and go to state 68


State 39

   20 expr: '[' expr • ')'
   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54
    ')'              shift, and go to state 69


State 40

    5 data_type: • KW_INTEGER
    6          | • KW_BOOL
    7          | • KW_SCALAR
    8          | • KW_STR
    9 var_decl: id_recursion ':' • data_type

    KW_INTEGER  shift, and go to state 70
    KW_SCALAR   shift, and go to state 71
    KW_STR      shift, and go to state 72
    KW_BOOL     shift, and go to state 73

    data_type  go to state 74


State 41

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   25             | expr KW_AND • expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 75
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 42

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   24             | expr KW_OR • expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 76
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 43

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr
   55                | expr OP_POWER • expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 77
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 44

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   35              | expr OP_LESSEQUAL • expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 78
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 45

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   36              | expr OP_GREATEREQUAL • expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 79
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 46

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   31              | expr OP_EQUAL • expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 80
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 47

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   32              | expr OP_INEQUAL • expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 81
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 48

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   34              | expr '>' • expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 82
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 49

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   33              | expr '<' • expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 83
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 50

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   49                | expr '-' • expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 84
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 51

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   48                | expr '+' • expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 85
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 52

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   50                | expr '*' • expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 86
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 53

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   51                | expr '/' • expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 87
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 54

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   52                | expr '%' • expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 88
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 55

    2 start: start expr ';' •

    $default  reduce using rule 2 (start)


State 56

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   42 assign_expr: ID ASSIGN expr •  [KW_FOR, ')', ']', ';']
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 42 (assign_expr)

    Conflict between rule 42 and token KW_AND resolved as shift (ASSIGN < KW_AND).
    Conflict between rule 42 and token KW_OR resolved as shift (ASSIGN < KW_OR).
    Conflict between rule 42 and token OP_POWER resolved as shift (ASSIGN < OP_POWER).
    Conflict between rule 42 and token OP_LESSEQUAL resolved as shift (ASSIGN < OP_LESSEQUAL).
    Conflict between rule 42 and token OP_GREATEREQUAL resolved as shift (ASSIGN < OP_GREATEREQUAL).
    Conflict between rule 42 and token OP_EQUAL resolved as shift (ASSIGN < OP_EQUAL).
    Conflict between rule 42 and token OP_INEQUAL resolved as shift (ASSIGN < OP_INEQUAL).
    Conflict between rule 42 and token '>' resolved as shift (ASSIGN < '>').
    Conflict between rule 42 and token '<' resolved as shift (ASSIGN < '<').
    Conflict between rule 42 and token '-' resolved as shift (ASSIGN < '-').
    Conflict between rule 42 and token '+' resolved as shift (ASSIGN < '+').
    Conflict between rule 42 and token '*' resolved as shift (ASSIGN < '*').
    Conflict between rule 42 and token '/' resolved as shift (ASSIGN < '/').
    Conflict between rule 42 and token '%' resolved as shift (ASSIGN < '%').


State 57

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   37 assign_expr: ID ASSIGN_PLUS expr •  [KW_FOR, ')', ']', ';']
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 37 (assign_expr)

    Conflict between rule 37 and token KW_AND resolved as shift (ASSIGN_PLUS < KW_AND).
    Conflict between rule 37 and token KW_OR resolved as shift (ASSIGN_PLUS < KW_OR).
    Conflict between rule 37 and token OP_POWER resolved as shift (ASSIGN_PLUS < OP_POWER).
    Conflict between rule 37 and token OP_LESSEQUAL resolved as shift (ASSIGN_PLUS < OP_LESSEQUAL).
    Conflict between rule 37 and token OP_GREATEREQUAL resolved as shift (ASSIGN_PLUS < OP_GREATEREQUAL).
    Conflict between rule 37 and token OP_EQUAL resolved as shift (ASSIGN_PLUS < OP_EQUAL).
    Conflict between rule 37 and token OP_INEQUAL resolved as shift (ASSIGN_PLUS < OP_INEQUAL).
    Conflict between rule 37 and token '>' resolved as shift (ASSIGN_PLUS < '>').
    Conflict between rule 37 and token '<' resolved as shift (ASSIGN_PLUS < '<').
    Conflict between rule 37 and token '-' resolved as shift (ASSIGN_PLUS < '-').
    Conflict between rule 37 and token '+' resolved as shift (ASSIGN_PLUS < '+').
    Conflict between rule 37 and token '*' resolved as shift (ASSIGN_PLUS < '*').
    Conflict between rule 37 and token '/' resolved as shift (ASSIGN_PLUS < '/').
    Conflict between rule 37 and token '%' resolved as shift (ASSIGN_PLUS < '%').


State 58

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   38 assign_expr: ID ASSIGN_MINUS expr •  [KW_FOR, ')', ']', ';']
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 38 (assign_expr)

    Conflict between rule 38 and token KW_AND resolved as shift (ASSIGN_MINUS < KW_AND).
    Conflict between rule 38 and token KW_OR resolved as shift (ASSIGN_MINUS < KW_OR).
    Conflict between rule 38 and token OP_POWER resolved as shift (ASSIGN_MINUS < OP_POWER).
    Conflict between rule 38 and token OP_LESSEQUAL resolved as shift (ASSIGN_MINUS < OP_LESSEQUAL).
    Conflict between rule 38 and token OP_GREATEREQUAL resolved as shift (ASSIGN_MINUS < OP_GREATEREQUAL).
    Conflict between rule 38 and token OP_EQUAL resolved as shift (ASSIGN_MINUS < OP_EQUAL).
    Conflict between rule 38 and token OP_INEQUAL resolved as shift (ASSIGN_MINUS < OP_INEQUAL).
    Conflict between rule 38 and token '>' resolved as shift (ASSIGN_MINUS < '>').
    Conflict between rule 38 and token '<' resolved as shift (ASSIGN_MINUS < '<').
    Conflict between rule 38 and token '-' resolved as shift (ASSIGN_MINUS < '-').
    Conflict between rule 38 and token '+' resolved as shift (ASSIGN_MINUS < '+').
    Conflict between rule 38 and token '*' resolved as shift (ASSIGN_MINUS < '*').
    Conflict between rule 38 and token '/' resolved as shift (ASSIGN_MINUS < '/').
    Conflict between rule 38 and token '%' resolved as shift (ASSIGN_MINUS < '%').


State 59

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   39 assign_expr: ID ASSIGN_PRODUCT expr •  [KW_FOR, ')', ']', ';']
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 39 (assign_expr)

    Conflict between rule 39 and token KW_AND resolved as shift (ASSIGN_PRODUCT < KW_AND).
    Conflict between rule 39 and token KW_OR resolved as shift (ASSIGN_PRODUCT < KW_OR).
    Conflict between rule 39 and token OP_POWER resolved as shift (ASSIGN_PRODUCT < OP_POWER).
    Conflict between rule 39 and token OP_LESSEQUAL resolved as shift (ASSIGN_PRODUCT < OP_LESSEQUAL).
    Conflict between rule 39 and token OP_GREATEREQUAL resolved as shift (ASSIGN_PRODUCT < OP_GREATEREQUAL).
    Conflict between rule 39 and token OP_EQUAL resolved as shift (ASSIGN_PRODUCT < OP_EQUAL).
    Conflict between rule 39 and token OP_INEQUAL resolved as shift (ASSIGN_PRODUCT < OP_INEQUAL).
    Conflict between rule 39 and token '>' resolved as shift (ASSIGN_PRODUCT < '>').
    Conflict between rule 39 and token '<' resolved as shift (ASSIGN_PRODUCT < '<').
    Conflict between rule 39 and token '-' resolved as shift (ASSIGN_PRODUCT < '-').
    Conflict between rule 39 and token '+' resolved as shift (ASSIGN_PRODUCT < '+').
    Conflict between rule 39 and token '*' resolved as shift (ASSIGN_PRODUCT < '*').
    Conflict between rule 39 and token '/' resolved as shift (ASSIGN_PRODUCT < '/').
    Conflict between rule 39 and token '%' resolved as shift (ASSIGN_PRODUCT < '%').


State 60

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   40 assign_expr: ID ASSIGN_DIV expr •  [KW_FOR, ')', ']', ';']
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 40 (assign_expr)

    Conflict between rule 40 and token KW_AND resolved as shift (ASSIGN_DIV < KW_AND).
    Conflict between rule 40 and token KW_OR resolved as shift (ASSIGN_DIV < KW_OR).
    Conflict between rule 40 and token OP_POWER resolved as shift (ASSIGN_DIV < OP_POWER).
    Conflict between rule 40 and token OP_LESSEQUAL resolved as shift (ASSIGN_DIV < OP_LESSEQUAL).
    Conflict between rule 40 and token OP_GREATEREQUAL resolved as shift (ASSIGN_DIV < OP_GREATEREQUAL).
    Conflict between rule 40 and token OP_EQUAL resolved as shift (ASSIGN_DIV < OP_EQUAL).
    Conflict between rule 40 and token OP_INEQUAL resolved as shift (ASSIGN_DIV < OP_INEQUAL).
    Conflict between rule 40 and token '>' resolved as shift (ASSIGN_DIV < '>').
    Conflict between rule 40 and token '<' resolved as shift (ASSIGN_DIV < '<').
    Conflict between rule 40 and token '-' resolved as shift (ASSIGN_DIV < '-').
    Conflict between rule 40 and token '+' resolved as shift (ASSIGN_DIV < '+').
    Conflict between rule 40 and token '*' resolved as shift (ASSIGN_DIV < '*').
    Conflict between rule 40 and token '/' resolved as shift (ASSIGN_DIV < '/').
    Conflict between rule 40 and token '%' resolved as shift (ASSIGN_DIV < '%').


State 61

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   41 assign_expr: ID ASSIGN_MOD expr •  [KW_FOR, ')', ']', ';']
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 41 (assign_expr)

    Conflict between rule 41 and token KW_AND resolved as shift (ASSIGN_MOD < KW_AND).
    Conflict between rule 41 and token KW_OR resolved as shift (ASSIGN_MOD < KW_OR).
    Conflict between rule 41 and token OP_POWER resolved as shift (ASSIGN_MOD < OP_POWER).
    Conflict between rule 41 and token OP_LESSEQUAL resolved as shift (ASSIGN_MOD < OP_LESSEQUAL).
    Conflict between rule 41 and token OP_GREATEREQUAL resolved as shift (ASSIGN_MOD < OP_GREATEREQUAL).
    Conflict between rule 41 and token OP_EQUAL resolved as shift (ASSIGN_MOD < OP_EQUAL).
    Conflict between rule 41 and token OP_INEQUAL resolved as shift (ASSIGN_MOD < OP_INEQUAL).
    Conflict between rule 41 and token '>' resolved as shift (ASSIGN_MOD < '>').
    Conflict between rule 41 and token '<' resolved as shift (ASSIGN_MOD < '<').
    Conflict between rule 41 and token '-' resolved as shift (ASSIGN_MOD < '-').
    Conflict between rule 41 and token '+' resolved as shift (ASSIGN_MOD < '+').
    Conflict between rule 41 and token '*' resolved as shift (ASSIGN_MOD < '*').
    Conflict between rule 41 and token '/' resolved as shift (ASSIGN_MOD < '/').
    Conflict between rule 41 and token '%' resolved as shift (ASSIGN_MOD < '%').


State 62

    3 declarations: • var_decl
    4             | • array_decl
    9 var_decl: • id_recursion ':' data_type
   10 id_recursion: • ID
   11             | • ID ',' id_recursion
   12 array_decl: • '[' ']' ':' data_type
   13           | • ID '[' expr ']' ':' data_type
   14 expr: • id_expr
   15     | • declarations
   16     | • assign_expr
   17     | • boolean_expr
   18     | • relation_expr
   19     | • arithmetic_expr
   20     | • '[' expr ')'
   21     | • '(' expr ')'
   22     | • DOT
   23 boolean_expr: • KW_NOT expr
   24             | • expr KW_OR expr
   25             | • expr KW_AND expr
   26             | • KW_TRUE
   27             | • KW_FALSE
   28 id_expr: • ID
   29        | • ID '[' expr ']'
   30        | • ID '[' INTEGER ']'
   31 relation_expr: • expr OP_EQUAL expr
   32              | • expr OP_INEQUAL expr
   33              | • expr '<' expr
   34              | • expr '>' expr
   35              | • expr OP_LESSEQUAL expr
   36              | • expr OP_GREATEREQUAL expr
   37 assign_expr: • ID ASSIGN_PLUS expr
   38            | • ID ASSIGN_MINUS expr
   39            | • ID ASSIGN_PRODUCT expr
   40            | • ID ASSIGN_DIV expr
   41            | • ID ASSIGN_MOD expr
   42            | • ID ASSIGN expr
   43            | • arrays
   44 arrays: • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type
   44       | ID ASSIGN_DOTS '[' • expr KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | • ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   45       | ID ASSIGN_DOTS '[' • expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   46 arithmetic_expr: • INTEGER
   47                | • FLOAT
   48                | • expr '+' expr
   49                | • expr '-' expr
   50                | • expr '*' expr
   51                | • expr '/' expr
   52                | • expr '%' expr
   53                | • '+' expr
   54                | • '-' expr
   55                | • expr OP_POWER expr

    ID        shift, and go to state 3
    INTEGER   shift, and go to state 4
    FLOAT     shift, and go to state 5
    KW_TRUE   shift, and go to state 6
    KW_FALSE  shift, and go to state 7
    KW_NOT    shift, and go to state 8
    DOT       shift, and go to state 9
    '-'       shift, and go to state 10
    '+'       shift, and go to state 11
    '('       shift, and go to state 12
    '['       shift, and go to state 13

    declarations     go to state 14
    var_decl         go to state 15
    id_recursion     go to state 16
    array_decl       go to state 17
    expr             go to state 89
    boolean_expr     go to state 19
    id_expr          go to state 20
    relation_expr    go to state 21
    assign_expr      go to state 22
    arrays           go to state 23
    arithmetic_expr  go to state 24


State 63

   30 id_expr: ID '[' INTEGER • ']'
   46 arithmetic_expr: INTEGER •  [KW_AND, KW_OR, OP_POWER, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%']

    ']'  shift, and go to state 90

    $default  reduce using rule 46 (arithmetic_expr)

    Conflict between rule 46 and token ']' resolved as shift (INTEGER < ']').


State 64

   13 array_decl: ID '[' expr • ']' ':' data_type
   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   29 id_expr: ID '[' expr • ']'
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54
    ']'              shift, and go to state 91


State 65

   10 id_recursion: ID •  [':']
   11             | ID • ',' id_recursion

    ','  shift, and go to state 33

    $default  reduce using rule 10 (id_recursion)


State 66

   11 id_recursion: ID ',' id_recursion •

    $default  reduce using rule 11 (id_recursion)


State 67

   21 expr: '(' expr ')' •

    $default  reduce using rule 21 (expr)


State 68

    5 data_type: • KW_INTEGER
    6          | • KW_BOOL
    7          | • KW_SCALAR
    8          | • KW_STR
   12 array_decl: '[' ']' ':' • data_type

    KW_INTEGER  shift, and go to state 70
    KW_SCALAR   shift, and go to state 71
    KW_STR      shift, and go to state 72
    KW_BOOL     shift, and go to state 73

    data_type  go to state 92


State 69

   20 expr: '[' expr ')' •

    $default  reduce using rule 20 (expr)


State 70

    5 data_type: KW_INTEGER •

    $default  reduce using rule 5 (data_type)


State 71

    7 data_type: KW_SCALAR •

    $default  reduce using rule 7 (data_type)


State 72

    8 data_type: KW_STR •

    $default  reduce using rule 8 (data_type)


State 73

    6 data_type: KW_BOOL •

    $default  reduce using rule 6 (data_type)


State 74

    9 var_decl: id_recursion ':' data_type •

    $default  reduce using rule 9 (var_decl)


State 75

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   25             | expr KW_AND expr •  [KW_FOR, KW_AND, KW_OR, ')', ']', ';']
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 25 (boolean_expr)

    Conflict between rule 25 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 25 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 25 and token OP_POWER resolved as shift (KW_AND < OP_POWER).
    Conflict between rule 25 and token OP_LESSEQUAL resolved as shift (KW_AND < OP_LESSEQUAL).
    Conflict between rule 25 and token OP_GREATEREQUAL resolved as shift (KW_AND < OP_GREATEREQUAL).
    Conflict between rule 25 and token OP_EQUAL resolved as shift (KW_AND < OP_EQUAL).
    Conflict between rule 25 and token OP_INEQUAL resolved as shift (KW_AND < OP_INEQUAL).
    Conflict between rule 25 and token '>' resolved as shift (KW_AND < '>').
    Conflict between rule 25 and token '<' resolved as shift (KW_AND < '<').
    Conflict between rule 25 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 25 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 25 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 25 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 25 and token '%' resolved as shift (KW_AND < '%').


State 76

   24 boolean_expr: expr • KW_OR expr
   24             | expr KW_OR expr •  [KW_FOR, KW_OR, ')', ']', ';']
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_AND           shift, and go to state 41
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 24 (boolean_expr)

    Conflict between rule 24 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 24 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 24 and token OP_POWER resolved as shift (KW_OR < OP_POWER).
    Conflict between rule 24 and token OP_LESSEQUAL resolved as shift (KW_OR < OP_LESSEQUAL).
    Conflict between rule 24 and token OP_GREATEREQUAL resolved as shift (KW_OR < OP_GREATEREQUAL).
    Conflict between rule 24 and token OP_EQUAL resolved as shift (KW_OR < OP_EQUAL).
    Conflict between rule 24 and token OP_INEQUAL resolved as shift (KW_OR < OP_INEQUAL).
    Conflict between rule 24 and token '>' resolved as shift (KW_OR < '>').
    Conflict between rule 24 and token '<' resolved as shift (KW_OR < '<').
    Conflict between rule 24 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 24 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 24 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 24 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 24 and token '%' resolved as shift (KW_OR < '%').


State 77

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr
   55                | expr OP_POWER expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 55 (arithmetic_expr)

    Conflict between rule 55 and token KW_AND resolved as reduce (KW_AND < OP_POWER).
    Conflict between rule 55 and token KW_OR resolved as reduce (KW_OR < OP_POWER).
    Conflict between rule 55 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 55 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < OP_POWER).
    Conflict between rule 55 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < OP_POWER).
    Conflict between rule 55 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_POWER).
    Conflict between rule 55 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < OP_POWER).
    Conflict between rule 55 and token '>' resolved as reduce ('>' < OP_POWER).
    Conflict between rule 55 and token '<' resolved as reduce ('<' < OP_POWER).
    Conflict between rule 55 and token '-' resolved as reduce ('-' < OP_POWER).
    Conflict between rule 55 and token '+' resolved as reduce ('+' < OP_POWER).
    Conflict between rule 55 and token '*' resolved as reduce ('*' < OP_POWER).
    Conflict between rule 55 and token '/' resolved as reduce ('/' < OP_POWER).
    Conflict between rule 55 and token '%' resolved as reduce ('%' < OP_POWER).


State 78

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   35              | expr OP_LESSEQUAL expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_EQUAL, OP_INEQUAL, ')', ']', ';']
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER         shift, and go to state 43
    OP_GREATEREQUAL  shift, and go to state 45
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 35 (relation_expr)

    Conflict between rule 35 and token KW_AND resolved as reduce (KW_AND < OP_LESSEQUAL).
    Conflict between rule 35 and token KW_OR resolved as reduce (KW_OR < OP_LESSEQUAL).
    Conflict between rule 35 and token OP_POWER resolved as shift (OP_LESSEQUAL < OP_POWER).
    Conflict between rule 35 and token OP_LESSEQUAL resolved as reduce (%left OP_LESSEQUAL).
    Conflict between rule 35 and token OP_GREATEREQUAL resolved as shift (OP_LESSEQUAL < OP_GREATEREQUAL).
    Conflict between rule 35 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_LESSEQUAL).
    Conflict between rule 35 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < OP_LESSEQUAL).
    Conflict between rule 35 and token '>' resolved as shift (OP_LESSEQUAL < '>').
    Conflict between rule 35 and token '<' resolved as shift (OP_LESSEQUAL < '<').
    Conflict between rule 35 and token '-' resolved as shift (OP_LESSEQUAL < '-').
    Conflict between rule 35 and token '+' resolved as shift (OP_LESSEQUAL < '+').
    Conflict between rule 35 and token '*' resolved as shift (OP_LESSEQUAL < '*').
    Conflict between rule 35 and token '/' resolved as shift (OP_LESSEQUAL < '/').
    Conflict between rule 35 and token '%' resolved as shift (OP_LESSEQUAL < '%').


State 79

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   36              | expr OP_GREATEREQUAL expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, ')', ']', ';']
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43
    '>'       shift, and go to state 48
    '<'       shift, and go to state 49
    '-'       shift, and go to state 50
    '+'       shift, and go to state 51
    '*'       shift, and go to state 52
    '/'       shift, and go to state 53
    '%'       shift, and go to state 54

    $default  reduce using rule 36 (relation_expr)

    Conflict between rule 36 and token KW_AND resolved as reduce (KW_AND < OP_GREATEREQUAL).
    Conflict between rule 36 and token KW_OR resolved as reduce (KW_OR < OP_GREATEREQUAL).
    Conflict between rule 36 and token OP_POWER resolved as shift (OP_GREATEREQUAL < OP_POWER).
    Conflict between rule 36 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < OP_GREATEREQUAL).
    Conflict between rule 36 and token OP_GREATEREQUAL resolved as reduce (%left OP_GREATEREQUAL).
    Conflict between rule 36 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_GREATEREQUAL).
    Conflict between rule 36 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < OP_GREATEREQUAL).
    Conflict between rule 36 and token '>' resolved as shift (OP_GREATEREQUAL < '>').
    Conflict between rule 36 and token '<' resolved as shift (OP_GREATEREQUAL < '<').
    Conflict between rule 36 and token '-' resolved as shift (OP_GREATEREQUAL < '-').
    Conflict between rule 36 and token '+' resolved as shift (OP_GREATEREQUAL < '+').
    Conflict between rule 36 and token '*' resolved as shift (OP_GREATEREQUAL < '*').
    Conflict between rule 36 and token '/' resolved as shift (OP_GREATEREQUAL < '/').
    Conflict between rule 36 and token '%' resolved as shift (OP_GREATEREQUAL < '%').


State 80

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   31              | expr OP_EQUAL expr •  [KW_FOR, KW_AND, KW_OR, OP_EQUAL, ')', ']', ';']
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 31 (relation_expr)

    Conflict between rule 31 and token KW_AND resolved as reduce (KW_AND < OP_EQUAL).
    Conflict between rule 31 and token KW_OR resolved as reduce (KW_OR < OP_EQUAL).
    Conflict between rule 31 and token OP_POWER resolved as shift (OP_EQUAL < OP_POWER).
    Conflict between rule 31 and token OP_LESSEQUAL resolved as shift (OP_EQUAL < OP_LESSEQUAL).
    Conflict between rule 31 and token OP_GREATEREQUAL resolved as shift (OP_EQUAL < OP_GREATEREQUAL).
    Conflict between rule 31 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 31 and token OP_INEQUAL resolved as shift (OP_EQUAL < OP_INEQUAL).
    Conflict between rule 31 and token '>' resolved as shift (OP_EQUAL < '>').
    Conflict between rule 31 and token '<' resolved as shift (OP_EQUAL < '<').
    Conflict between rule 31 and token '-' resolved as shift (OP_EQUAL < '-').
    Conflict between rule 31 and token '+' resolved as shift (OP_EQUAL < '+').
    Conflict between rule 31 and token '*' resolved as shift (OP_EQUAL < '*').
    Conflict between rule 31 and token '/' resolved as shift (OP_EQUAL < '/').
    Conflict between rule 31 and token '%' resolved as shift (OP_EQUAL < '%').


State 81

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   32              | expr OP_INEQUAL expr •  [KW_FOR, KW_AND, KW_OR, OP_EQUAL, OP_INEQUAL, ')', ']', ';']
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54

    $default  reduce using rule 32 (relation_expr)

    Conflict between rule 32 and token KW_AND resolved as reduce (KW_AND < OP_INEQUAL).
    Conflict between rule 32 and token KW_OR resolved as reduce (KW_OR < OP_INEQUAL).
    Conflict between rule 32 and token OP_POWER resolved as shift (OP_INEQUAL < OP_POWER).
    Conflict between rule 32 and token OP_LESSEQUAL resolved as shift (OP_INEQUAL < OP_LESSEQUAL).
    Conflict between rule 32 and token OP_GREATEREQUAL resolved as shift (OP_INEQUAL < OP_GREATEREQUAL).
    Conflict between rule 32 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_INEQUAL).
    Conflict between rule 32 and token OP_INEQUAL resolved as reduce (%left OP_INEQUAL).
    Conflict between rule 32 and token '>' resolved as shift (OP_INEQUAL < '>').
    Conflict between rule 32 and token '<' resolved as shift (OP_INEQUAL < '<').
    Conflict between rule 32 and token '-' resolved as shift (OP_INEQUAL < '-').
    Conflict between rule 32 and token '+' resolved as shift (OP_INEQUAL < '+').
    Conflict between rule 32 and token '*' resolved as shift (OP_INEQUAL < '*').
    Conflict between rule 32 and token '/' resolved as shift (OP_INEQUAL < '/').
    Conflict between rule 32 and token '%' resolved as shift (OP_INEQUAL < '%').


State 82

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   34              | expr '>' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', ')', ']', ';']
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43
    '-'       shift, and go to state 50
    '+'       shift, and go to state 51
    '*'       shift, and go to state 52
    '/'       shift, and go to state 53
    '%'       shift, and go to state 54

    $default  reduce using rule 34 (relation_expr)

    Conflict between rule 34 and token KW_AND resolved as reduce (KW_AND < '>').
    Conflict between rule 34 and token KW_OR resolved as reduce (KW_OR < '>').
    Conflict between rule 34 and token OP_POWER resolved as shift ('>' < OP_POWER).
    Conflict between rule 34 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '>').
    Conflict between rule 34 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '>').
    Conflict between rule 34 and token OP_EQUAL resolved as reduce (OP_EQUAL < '>').
    Conflict between rule 34 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '>').
    Conflict between rule 34 and token '>' resolved as reduce (%left '>').
    Conflict between rule 34 and token '<' resolved as reduce (%left '<').
    Conflict between rule 34 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 34 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 34 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 34 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 34 and token '%' resolved as shift ('>' < '%').


State 83

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   33              | expr '<' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', ')', ']', ';']
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43
    '-'       shift, and go to state 50
    '+'       shift, and go to state 51
    '*'       shift, and go to state 52
    '/'       shift, and go to state 53
    '%'       shift, and go to state 54

    $default  reduce using rule 33 (relation_expr)

    Conflict between rule 33 and token KW_AND resolved as reduce (KW_AND < '<').
    Conflict between rule 33 and token KW_OR resolved as reduce (KW_OR < '<').
    Conflict between rule 33 and token OP_POWER resolved as shift ('<' < OP_POWER).
    Conflict between rule 33 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '<').
    Conflict between rule 33 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '<').
    Conflict between rule 33 and token OP_EQUAL resolved as reduce (OP_EQUAL < '<').
    Conflict between rule 33 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '<').
    Conflict between rule 33 and token '>' resolved as reduce (%left '>').
    Conflict between rule 33 and token '<' resolved as reduce (%left '<').
    Conflict between rule 33 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 33 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 33 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 33 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 33 and token '%' resolved as shift ('<' < '%').


State 84

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   49                | expr '-' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 49 (arithmetic_expr)

    Conflict between rule 49 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 49 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 49 and token OP_POWER resolved as shift ('-' < OP_POWER).
    Conflict between rule 49 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '-').
    Conflict between rule 49 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '-').
    Conflict between rule 49 and token OP_EQUAL resolved as reduce (OP_EQUAL < '-').
    Conflict between rule 49 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '-').
    Conflict between rule 49 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 49 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 49 and token '-' resolved as reduce (%left '-').
    Conflict between rule 49 and token '+' resolved as reduce (%left '+').
    Conflict between rule 49 and token '*' resolved as reduce (%left '*').
    Conflict between rule 49 and token '/' resolved as reduce (%left '/').
    Conflict between rule 49 and token '%' resolved as reduce (%left '%').


State 85

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   48                | expr '+' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 48 (arithmetic_expr)

    Conflict between rule 48 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 48 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 48 and token OP_POWER resolved as shift ('+' < OP_POWER).
    Conflict between rule 48 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '+').
    Conflict between rule 48 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '+').
    Conflict between rule 48 and token OP_EQUAL resolved as reduce (OP_EQUAL < '+').
    Conflict between rule 48 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '+').
    Conflict between rule 48 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 48 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 48 and token '-' resolved as reduce (%left '-').
    Conflict between rule 48 and token '+' resolved as reduce (%left '+').
    Conflict between rule 48 and token '*' resolved as reduce (%left '*').
    Conflict between rule 48 and token '/' resolved as reduce (%left '/').
    Conflict between rule 48 and token '%' resolved as reduce (%left '%').


State 86

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   50                | expr '*' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 50 (arithmetic_expr)

    Conflict between rule 50 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 50 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 50 and token OP_POWER resolved as shift ('*' < OP_POWER).
    Conflict between rule 50 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '*').
    Conflict between rule 50 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '*').
    Conflict between rule 50 and token OP_EQUAL resolved as reduce (OP_EQUAL < '*').
    Conflict between rule 50 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '*').
    Conflict between rule 50 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 50 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 50 and token '-' resolved as reduce (%left '-').
    Conflict between rule 50 and token '+' resolved as reduce (%left '+').
    Conflict between rule 50 and token '*' resolved as reduce (%left '*').
    Conflict between rule 50 and token '/' resolved as reduce (%left '/').
    Conflict between rule 50 and token '%' resolved as reduce (%left '%').


State 87

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   51                | expr '/' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 51 (arithmetic_expr)

    Conflict between rule 51 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 51 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 51 and token OP_POWER resolved as shift ('/' < OP_POWER).
    Conflict between rule 51 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '/').
    Conflict between rule 51 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '/').
    Conflict between rule 51 and token OP_EQUAL resolved as reduce (OP_EQUAL < '/').
    Conflict between rule 51 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '/').
    Conflict between rule 51 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 51 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 51 and token '-' resolved as reduce (%left '-').
    Conflict between rule 51 and token '+' resolved as reduce (%left '+').
    Conflict between rule 51 and token '*' resolved as reduce (%left '*').
    Conflict between rule 51 and token '/' resolved as reduce (%left '/').
    Conflict between rule 51 and token '%' resolved as reduce (%left '%').


State 88

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   52                | expr '%' expr •  [KW_FOR, KW_AND, KW_OR, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']
   55                | expr • OP_POWER expr

    OP_POWER  shift, and go to state 43

    $default  reduce using rule 52 (arithmetic_expr)

    Conflict between rule 52 and token KW_AND resolved as reduce (KW_AND < '%').
    Conflict between rule 52 and token KW_OR resolved as reduce (KW_OR < '%').
    Conflict between rule 52 and token OP_POWER resolved as shift ('%' < OP_POWER).
    Conflict between rule 52 and token OP_LESSEQUAL resolved as reduce (OP_LESSEQUAL < '%').
    Conflict between rule 52 and token OP_GREATEREQUAL resolved as reduce (OP_GREATEREQUAL < '%').
    Conflict between rule 52 and token OP_EQUAL resolved as reduce (OP_EQUAL < '%').
    Conflict between rule 52 and token OP_INEQUAL resolved as reduce (OP_INEQUAL < '%').
    Conflict between rule 52 and token '>' resolved as reduce ('>' < '%').
    Conflict between rule 52 and token '<' resolved as reduce ('<' < '%').
    Conflict between rule 52 and token '-' resolved as reduce (%left '-').
    Conflict between rule 52 and token '+' resolved as reduce (%left '+').
    Conflict between rule 52 and token '*' resolved as reduce (%left '*').
    Conflict between rule 52 and token '/' resolved as reduce (%left '/').
    Conflict between rule 52 and token '%' resolved as reduce (%left '%').


State 89

   24 boolean_expr: expr • KW_OR expr
   25             | expr • KW_AND expr
   31 relation_expr: expr • OP_EQUAL expr
   32              | expr • OP_INEQUAL expr
   33              | expr • '<' expr
   34              | expr • '>' expr
   35              | expr • OP_LESSEQUAL expr
   36              | expr • OP_GREATEREQUAL expr
   44 arrays: ID ASSIGN_DOTS '[' expr • KW_FOR ID ':' INTEGER ']' ':' data_type
   45       | ID ASSIGN_DOTS '[' expr • KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type
   48 arithmetic_expr: expr • '+' expr
   49                | expr • '-' expr
   50                | expr • '*' expr
   51                | expr • '/' expr
   52                | expr • '%' expr
   55                | expr • OP_POWER expr

    KW_FOR           shift, and go to state 93
    KW_AND           shift, and go to state 41
    KW_OR            shift, and go to state 42
    OP_POWER         shift, and go to state 43
    OP_LESSEQUAL     shift, and go to state 44
    OP_GREATEREQUAL  shift, and go to state 45
    OP_EQUAL         shift, and go to state 46
    OP_INEQUAL       shift, and go to state 47
    '>'              shift, and go to state 48
    '<'              shift, and go to state 49
    '-'              shift, and go to state 50
    '+'              shift, and go to state 51
    '*'              shift, and go to state 52
    '/'              shift, and go to state 53
    '%'              shift, and go to state 54


State 90

   30 id_expr: ID '[' INTEGER ']' •

    $default  reduce using rule 30 (id_expr)


State 91

   13 array_decl: ID '[' expr ']' • ':' data_type
   29 id_expr: ID '[' expr ']' •  [KW_FOR, KW_AND, KW_OR, OP_POWER, OP_LESSEQUAL, OP_GREATEREQUAL, OP_EQUAL, OP_INEQUAL, '>', '<', '-', '+', '*', '/', '%', ')', ']', ';']

    ':'  shift, and go to state 94

    $default  reduce using rule 29 (id_expr)


State 92

   12 array_decl: '[' ']' ':' data_type •

    $default  reduce using rule 12 (array_decl)


State 93

   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR • ID ':' INTEGER ']' ':' data_type
   45       | ID ASSIGN_DOTS '[' expr KW_FOR • ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type

    ID  shift, and go to state 95


State 94

    5 data_type: • KW_INTEGER
    6          | • KW_BOOL
    7          | • KW_SCALAR
    8          | • KW_STR
   13 array_decl: ID '[' expr ']' ':' • data_type

    KW_INTEGER  shift, and go to state 70
    KW_SCALAR   shift, and go to state 71
    KW_STR      shift, and go to state 72
    KW_BOOL     shift, and go to state 73

    data_type  go to state 96


State 95

   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID • ':' INTEGER ']' ':' data_type
   45       | ID ASSIGN_DOTS '[' expr KW_FOR ID • ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type

    ':'  shift, and go to state 97


State 96

   13 array_decl: ID '[' expr ']' ':' data_type •

    $default  reduce using rule 13 (array_decl)


State 97

    5 data_type: • KW_INTEGER
    6          | • KW_BOOL
    7          | • KW_SCALAR
    8          | • KW_STR
   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' • INTEGER ']' ':' data_type
   45       | ID ASSIGN_DOTS '[' expr KW_FOR ID ':' • data_type KW_IN ID KW_OF INTEGER ']' ':' data_type

    INTEGER     shift, and go to state 98
    KW_INTEGER  shift, and go to state 70
    KW_SCALAR   shift, and go to state 71
    KW_STR      shift, and go to state 72
    KW_BOOL     shift, and go to state 73

    data_type  go to state 99


State 98

   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER • ']' ':' data_type

    ']'  shift, and go to state 100


State 99

   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type • KW_IN ID KW_OF INTEGER ']' ':' data_type

    KW_IN  shift, and go to state 101


State 100

   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' • ':' data_type

    ':'  shift, and go to state 102


State 101

   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN • ID KW_OF INTEGER ']' ':' data_type

    ID  shift, and go to state 103


State 102

    5 data_type: • KW_INTEGER
    6          | • KW_BOOL
    7          | • KW_SCALAR
    8          | • KW_STR
   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' • data_type

    KW_INTEGER  shift, and go to state 70
    KW_SCALAR   shift, and go to state 71
    KW_STR      shift, and go to state 72
    KW_BOOL     shift, and go to state 73

    data_type  go to state 104


State 103

   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID • KW_OF INTEGER ']' ':' data_type

    KW_OF  shift, and go to state 105


State 104

   44 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' INTEGER ']' ':' data_type •

    $default  reduce using rule 44 (arrays)


State 105

   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF • INTEGER ']' ':' data_type

    INTEGER  shift, and go to state 106


State 106

   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER • ']' ':' data_type

    ']'  shift, and go to state 107


State 107

   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' • ':' data_type

    ':'  shift, and go to state 108


State 108

    5 data_type: • KW_INTEGER
    6          | • KW_BOOL
    7          | • KW_SCALAR
    8          | • KW_STR
   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' • data_type

    KW_INTEGER  shift, and go to state 70
    KW_SCALAR   shift, and go to state 71
    KW_STR      shift, and go to state 72
    KW_BOOL     shift, and go to state 73

    data_type  go to state 109


State 109

   45 arrays: ID ASSIGN_DOTS '[' expr KW_FOR ID ':' data_type KW_IN ID KW_OF INTEGER ']' ':' data_type •

    $default  reduce using rule 45 (arrays)
